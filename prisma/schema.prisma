generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    SUPERVISOR
    STUDENT
}

enum AdminLevel {
    SUPER
    GROUP
    SUB_GROUP
    NONE
}

enum Stage {
    SETUP
    PROJECT_SUBMISSION
    PROJECT_SELECTION
    PROJECT_ALLOCATION
    ALLOCATION_ADJUSTMENT
    ALLOCATION_PUBLICATION
}

enum AlgorithmFlag {
    MAXSIZE
    GEN
    GRE
    MINCOST
    MINSQCOST
    LSB
}

enum PreferenceType {
    SHORTLIST
    PREFERENCE
}

model Invitation {
    email                String
    allocationGroupId    String @map("allocation_group_id")
    allocationSubGroupId String @map("allocation_sub_group_id")
    allocationInstanceId String @map("allocation_instance_id")

    @@id(name: "invitationId", [email, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model UserInInstance {
    user                      User                        @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId                    String                      @map("user_id")
    role                      Role
    joined                    Boolean                     @default(false)
    // ---
    allocationGroupId         String                      @map("allocation_group_id")
    allocationSubGroupId      String                      @map("allocation_sub_group_id")
    allocationInstanceId      String                      @map("allocation_instance_id")
    allocationInstance        AllocationInstance          @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)
    // ---
    studentAllocation         ProjectAllocation?          @relation(name: "project_allocation") // TODO: move to student details
    studentDetails            StudentDetails[]            @relation(name: "student_details")
    studentPreferences        Preference[] // TODO: move to student details
    // ---
    supervisorInstanceDetails SupervisorInstanceDetails[] @relation(name: "supervisor_details")
    supervisorProjects        Project[]

    @@id(name: "instanceMembership", [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model AdminInSpace {
    systemId             String     @id @default(uuid()) @map("system_id")
    user                 User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId               String     @map("user_id")
    adminLevel           AdminLevel @map("admin_level")
    // ---
    allocationGroupId    String?    @map("allocation_group_id")
    allocationSubGroupId String?    @map("allocation_sub_group_id")
}

model AllocationGroup {
    id                  String               @id
    displayName         String               @unique @map("display_name")
    allocationSubGroups AllocationSubGroup[]
}

model AllocationSubGroup {
    id                  String
    displayName         String               @map("display_name")
    // ---
    allocationGroupId   String               @map("allocation_group_id")
    allocationGroup     AllocationGroup      @relation(fields: [allocationGroupId], references: [id], onDelete: Cascade)
    // ---
    allocationInstances AllocationInstance[]

    @@id(name: "subGroupId", [allocationGroupId, id])
}

model AllocationInstance {
    id                           String // TODO: consider renaming
    displayName                  String                 @map("display_name")
    stage                        Stage                  @default(SETUP)
    selectedAlgName              String?                @map("selected_alg_name")
    parentInstanceId             String?                @map("parent_instance_id")
    // supervisor details
    projectSubmissionDeadline    DateTime               @map("project_submission_deadline")
    supervisorAllocationAccess   Boolean                @default(false) @map("supervisor_allocation_access")
    // student details
    minPreferences               Int                    @map("min_preferences")
    maxPreferences               Int                    @map("max_preferences")
    maxPreferencesPerSupervisor  Int                    @map("max_preferences_per_supervisor")
    preferenceSubmissionDeadline DateTime               @map("preference_submission_deadline")
    studentAllocationAccess      Boolean                @default(false) @map("student_allocation_access")
    // ---
    allocationSubGroup           AllocationSubGroup     @relation(fields: [allocationGroupId, allocationSubGroupId], references: [allocationGroupId, id], onDelete: Cascade)
    allocationGroupId            String                 @map("allocation_group_id")
    allocationSubGroupId         String                 @map("allocation_sub_group_id")
    // ---
    adminInstanceDetails         AdminInstanceDetails[]
    users                        UserInInstance[]
    projects                     Project[]
    algorithms                   Algorithm[]
    flags                        Flag[]
    tags                         Tag[]

    @@id(name: "instanceId", [allocationGroupId, allocationSubGroupId, id])
}

model AdminInstanceDetails {
    exportedToExternalSystem Boolean            @default(false) @map("exported_to_external_system")
    allStudentsChecked       Boolean            @default(false) @map("all_students_checked")
    allSupervisorsChecked    Boolean            @default(false) @map("all_supervisors_checked")
    // ---
    allocationGroupId        String             @map("allocation_group_id")
    allocationSubGroupId     String             @map("allocation_sub_group_id")
    allocationInstanceId     String             @map("allocation_instance_id")
    allocationInstance       AllocationInstance @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade, onUpdate: Cascade)

    @@id([allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model StudentDetails {
    studentLevel             Int               @map("student_level")
    submittedPreferences     Boolean           @default(false) @map("submitted_preferences")
    latestSubmissionDateTime DateTime?         @map("latest_submission_date_time")
    // ---
    userId                   String            @map("user_id")
    allocationGroupId        String            @map("allocation_group_id")
    allocationSubGroupId     String            @map("allocation_sub_group_id")
    allocationInstanceId     String            @map("allocation_instance_id")
    // ---
    userInInstance           UserInInstance    @relation(name: "student_details", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, onUpdate: Cascade)
    preferences              SavedPreference[]

    @@id(name: "detailsId", [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model SupervisorInstanceDetails {
    projectAllocationLowerBound Int            @map("project_allocation_lower_bound")
    projectAllocationTarget     Int            @map("project_allocation_target")
    projectAllocationUpperBound Int            @map("project_allocation_upper_bound")
    // ---
    userId                      String         @map("user_id")
    allocationGroupId           String         @map("allocation_group_id")
    allocationSubGroupId        String         @map("allocation_sub_group_id")
    allocationInstanceId        String         @map("allocation_instance_id")
    // ---
    userInInstance              UserInInstance @relation(name: "supervisor_details", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade, onUpdate: Cascade)

    @@id(name: "detailsId", [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model Project {
    id                           String              @id @default(uuid())
    title                        String
    description                  String
    capacityLowerBound           Int                 @map("capacity_lower_bound")
    capacityUpperBound           Int                 @map("capacity_upper_bound")
    supervisorId                 String              @map("supervisor_id")
    preAllocatedStudentId        String?             @map("pre_allocated_student_id")
    specialTechnicalRequirements String?             @map("special_technical_requirements")
    latestEditDateTime           DateTime            @default(now()) @map("latest_edit_date_time")
    // ---
    allocationInstance           AllocationInstance  @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)
    supervisor                   UserInInstance      @relation(fields: [supervisorId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)
    // ---
    allocationGroupId            String              @map("allocation_group_id")
    allocationSubGroupId         String              @map("allocation_sub_group_id")
    allocationInstanceId         String              @map("allocation_instance_id")
    // ---
    flagOnProjects               FlagOnProject[] // TODO: rename to flagsOnProject
    tagOnProject                 TagOnProject[] // TODO: rename to tagsOnProject
    inStudentPreferences         Preference[]
    inStudentSavedPreferences    SavedPreference[]
    allocations                  ProjectAllocation[]

    @@unique([title, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model Preference {
    projectId            String         @map("project_id")
    userId               String         @map("user_id")
    rank                 Float
    type                 PreferenceType
    // ---
    allocationGroupId    String         @map("allocation_group_id")
    allocationSubGroupId String         @map("allocation_sub_group_id")
    allocationInstanceId String         @map("allocation_instance_id")
    // ---
    project              Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    student              UserInInstance @relation(fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)

    @@id(name: "preferenceId", [projectId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model SavedPreference {
    projectId            String         @map("project_id")
    userId               String         @map("user_id")
    rank                 Int
    // ---
    allocationGroupId    String         @map("allocation_group_id")
    allocationSubGroupId String         @map("allocation_sub_group_id")
    allocationInstanceId String         @map("allocation_instance_id")
    // ---
    project              Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    student              StudentDetails @relation(fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)

    @@id([projectId, userId])
    @@unique([projectId, userId, rank])
    @@map("saved_preference")
}

model ProjectAllocation {
    projectId            String         @map("project_id")
    userId               String         @map("user_id")
    studentRanking       Int            @map("student_ranking")
    specialCircumstances String?        @map("special_circumstances")
    // ---
    allocationGroupId    String         @map("allocation_group_id")
    allocationSubGroupId String         @map("allocation_sub_group_id")
    allocationInstanceId String         @map("allocation_instance_id")
    // ---
    project              Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
    student              UserInInstance @relation(name: "project_allocation", fields: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [userId, allocationGroupId, allocationSubGroupId, allocationInstanceId], onDelete: Cascade)

    @@id(name: "allocationId", [projectId, userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
    @@unique([userId, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model Flag {
    id                   String             @id @default(uuid())
    title                String
    // ---
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")
    // ---
    allocationInstance   AllocationInstance @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)
    // ---
    flagOnProjects       FlagOnProject[]

    @@unique([title, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model FlagOnProject {
    flag      Flag    @relation(fields: [flagId], references: [id], onDelete: Cascade)
    flagId    String  @map("flag_id")
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String  @map("project_id")

    @@id([flagId, projectId])
}

model Tag {
    id                   String             @id @default(uuid())
    title                String
    // ---
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")
    // ---
    allocationInstance   AllocationInstance @relation(map: "allocation_instance", fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)
    // ---
    tagOnProject         TagOnProject[]

    @@unique([title, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model TagOnProject {
    tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
    tagId     String  @map("tag_id")
    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String  @map("project_id")

    @@id([tagId, projectId])
}

model Algorithm {
    algName              String             @map("alg_name")
    displayName          String             @map("display_name")
    description          String?
    targetModifier       Int                @default(0) @map("target_modifier")
    upperBoundModifier   Int                @default(0) @map("upper_bound_modifier")
    maxRank              Int                @default(-1) @map("max_rank")
    flag1                AlgorithmFlag      @map("flag_1")
    flag2                AlgorithmFlag?     @map("flag_2")
    flag3                AlgorithmFlag?     @map("flag_3")
    matchingResultData   Json               @map("matching_result_data")
    // ---
    allocationGroupId    String             @map("allocation_group_id")
    allocationSubGroupId String             @map("allocation_sub_group_id")
    allocationInstanceId String             @map("allocation_instance_id")
    // ---
    allocationInstance   AllocationInstance @relation(fields: [allocationGroupId, allocationSubGroupId, allocationInstanceId], references: [allocationGroupId, allocationSubGroupId, id], onDelete: Cascade)

    @@id(name: "algorithmId", [algName, allocationGroupId, allocationSubGroupId, allocationInstanceId])
}

model User {
    id              String           @id
    name            String
    email           String           @unique
    userInInstances UserInInstance[]
    adminSpaces     AdminInSpace[]
}
